{"ast":null,"code":"import _defineProperty from \"D:/program/LanqiaoVue/vue-demo/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { login } from '@/api/login'; //引入登录 api 接口\nimport { getPermissionByUserId } from '@/api/permission'; // 引入获取菜单权限 api 接口\nimport { getUserList, getUserListByPage, deleteUser, getRoleNameList, insertUser } from '@/api/system'; // 引入 系统管理接口\n\nimport { getToken } from '@/utils/auth';\nvar user = {\n  // state: {\n  //   // token: getToken(),\n  //   // 是否登录\n  //   isLogin:false,\n  //   userId:'1'\n  // },\n  // mutations: {\n  //   SET_TOKEN: (state, token) => {\n  //     state.token = token\n  //   },\n  //   SET_ISLOGIN:(state,isLogin)=>{\n  //       state.isLogin=isLogin\n  //   },\n  //   SET_USERID:(state,userId)=>{\n  //     state.userId=userId\n  //   }\n  // },\n  actions: _defineProperty({\n    // 登录\n    Login: function Login(_ref, loginInfo) {\n      var commit = _ref.commit;\n      //定义 Login 方法，在组件中使用 this.$store.dispatch(\"Login\") 调用\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        login(loginInfo).then(function (response) {\n          //使用 login 接口进行网络请求\n          // commit('') //提交一个 mutation，通知状态改变\n          // commit('SET_ISLOGIN',true)\n          // commit('SET_USERID',1)\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    // 获取菜单权限列表\n    GetPermissionByUserId: function GetPermissionByUserId(_ref2, userId) {\n      var commit = _ref2.commit;\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        getPermissionByUserId(userId).then(function (response) {\n          //使用 permission 接口进行网络请求\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    // 获取员工列表\n    GetUserList: function GetUserList(_ref3) {\n      var commit = _ref3.commit;\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        getUserList().then(function (response) {\n          //使用 permission 接口进行网络请求\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    GetUserListByPage: function GetUserListByPage(_ref4, tablePage) {\n      var commit = _ref4.commit;\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        getUserListByPage(tablePage).then(function (response) {\n          //使用 permission 接口进行网络请求\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          console.log(\"system.js GetUserListByPage 错误\");\n          reject(error);\n        });\n      });\n    },\n    // 删除员工\n    DeleteUser: function DeleteUser(_ref5, userId) {\n      var commit = _ref5.commit;\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        deleteUser(userId).then(function (response) {\n          //使用 permission 接口进行网络请求\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          console.log(\"system.js DeleteUser 错误\");\n          reject(error);\n        });\n      });\n    },\n    // 获取角色列表（只获取roleId和roleName）\n    GetRoleNameList: function GetRoleNameList(_ref6) {\n      var commit = _ref6.commit;\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        getRoleNameList().then(function (response) {\n          //使用 permission 接口进行网络请求\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          console.log(\"system.js GetRoleNameList 错误\");\n          reject(error);\n        });\n      });\n    },\n    InsertUser: function InsertUser(_ref7, userInfo) {\n      var commit = _ref7.commit;\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        insertUser(userInfo).then(function (response) {\n          //使用 permission 接口进行网络请求\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          console.log(\"system.js InsertUser 错误\");\n          reject(error);\n        });\n      });\n    }\n  }, \"InsertUser\", function InsertUser(_ref8, userInfo) {\n    var commit = _ref8.commit;\n    return new Promise(function (resolve, reject) {\n      //封装一个 Promise\n      insertUser(userInfo).then(function (response) {\n        //使用 permission 接口进行网络请求\n        resolve(response); //将结果封装进 Promise\n      }).catch(function (error) {\n        console.log(\"system.js InsertUser 错误\");\n        reject(error);\n      });\n    });\n  })\n};\nexport default user;","map":{"version":3,"names":["login","getPermissionByUserId","getUserList","getUserListByPage","deleteUser","getRoleNameList","insertUser","getToken","user","actions","Login","loginInfo","commit","Promise","resolve","reject","then","response","catch","error","GetPermissionByUserId","userId","GetUserList","GetUserListByPage","tablePage","console","log","DeleteUser","GetRoleNameList","InsertUser","userInfo"],"sources":["D:/program/LanqiaoVue/vue-demo/src/store/modules/user.js"],"sourcesContent":["import { login } from '@/api/login'//引入登录 api 接口\r\nimport {getPermissionByUserId} from '@/api/permission' // 引入获取菜单权限 api 接口\r\nimport { getUserList,getUserListByPage,deleteUser,getRoleNameList,insertUser} from '@/api/system' // 引入 系统管理接口\r\n\r\nimport { getToken } from '@/utils/auth'\r\n\r\n\r\nconst user = {\r\n  // state: {\r\n  //   // token: getToken(),\r\n  //   // 是否登录\r\n  //   isLogin:false,\r\n  //   userId:'1'\r\n  // },\r\n  // mutations: {\r\n  //   SET_TOKEN: (state, token) => {\r\n  //     state.token = token\r\n  //   },\r\n  //   SET_ISLOGIN:(state,isLogin)=>{\r\n  //       state.isLogin=isLogin\r\n  //   },\r\n  //   SET_USERID:(state,userId)=>{\r\n  //     state.userId=userId\r\n  //   }\r\n  // },\r\n  actions: {\r\n    // 登录\r\n    Login({ commit }, loginInfo) { //定义 Login 方法，在组件中使用 this.$store.dispatch(\"Login\") 调用\r\n      return new Promise((resolve, reject) => { //封装一个 Promise\r\n        login(loginInfo).then(response => { //使用 login 接口进行网络请求\r\n          // commit('') //提交一个 mutation，通知状态改变\r\n          // commit('SET_ISLOGIN',true)\r\n          // commit('SET_USERID',1)\r\n          resolve(response) //将结果封装进 Promise\r\n        }).catch(error => {\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n\r\n    // 获取菜单权限列表\r\n    GetPermissionByUserId({commit},userId){\r\n      return new Promise((resolve, reject) => { //封装一个 Promise\r\n        getPermissionByUserId(userId).then(response => { //使用 permission 接口进行网络请求\r\n          resolve(response) //将结果封装进 Promise\r\n        }).catch(error => {\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n\r\n    // 获取员工列表\r\n    GetUserList({commit}){\r\n      return new Promise((resolve, reject) => { //封装一个 Promise\r\n        getUserList().then(response => { //使用 permission 接口进行网络请求\r\n          resolve(response) //将结果封装进 Promise\r\n        }).catch(error => {\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n\r\n    GetUserListByPage({commit},tablePage){\r\n      return new Promise((resolve, reject) => { //封装一个 Promise\r\n        getUserListByPage(tablePage).then(response => { //使用 permission 接口进行网络请求\r\n          resolve(response) //将结果封装进 Promise\r\n        }).catch(error => {\r\n          console.log(\"system.js GetUserListByPage 错误\")\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n\r\n    // 删除员工\r\n    DeleteUser({commit},userId){\r\n      return new Promise((resolve, reject) => { //封装一个 Promise\r\n        deleteUser(userId).then(response => { //使用 permission 接口进行网络请求\r\n          resolve(response) //将结果封装进 Promise\r\n        }).catch(error => {\r\n          console.log(\"system.js DeleteUser 错误\")\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n\r\n    // 获取角色列表（只获取roleId和roleName）\r\n    GetRoleNameList({commit}){\r\n      return new Promise((resolve, reject) => { //封装一个 Promise\r\n        getRoleNameList().then(response => { //使用 permission 接口进行网络请求\r\n          resolve(response) //将结果封装进 Promise\r\n        }).catch(error => {\r\n          console.log(\"system.js GetRoleNameList 错误\")\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n\r\n    InsertUser({commit},userInfo){\r\n      return new Promise((resolve, reject) => { //封装一个 Promise\r\n         insertUser(userInfo).then(response => { //使用 permission 接口进行网络请求\r\n          resolve(response) //将结果封装进 Promise\r\n        }).catch(error => {\r\n          console.log(\"system.js InsertUser 错误\")\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n    InsertUser({commit},userInfo){\r\n      return new Promise((resolve, reject) => { //封装一个 Promise\r\n         insertUser(userInfo).then(response => { //使用 permission 接口进行网络请求\r\n          resolve(response) //将结果封装进 Promise\r\n        }).catch(error => {\r\n          console.log(\"system.js InsertUser 错误\")\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n  }\r\n}\r\n\r\nexport default user\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}