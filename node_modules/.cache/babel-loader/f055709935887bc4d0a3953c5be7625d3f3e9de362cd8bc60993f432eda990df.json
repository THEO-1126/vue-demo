{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport { login } from '@/api/loginApi'; //引入登录 api 接口\nimport { getToken } from '@/utils/auth';\nimport user from './user';\nvar loginVo = {\n  state: {\n    user: {\n      // 存储用户的 userId 和 username\n      userId: '',\n      username: ''\n    },\n    // 存储token\n    loginToken: localStorage.getItem('loginToken') ? localStorage.getItem('loginToken') : ''\n  },\n  mutations: {\n    update: update\n  },\n  actions: {\n    // 登录\n    Login: function Login(_ref, loginInfo) {\n      var commit = _ref.commit;\n      //定义 Login 方法，在组件中使用 this.$store.dispatch(\"Login\") 调用\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        login(loginInfo).then(function (response) {\n          //使用 login 接口进行网络请求\n          state.user = JSON.stringify(response.data.data);\n          localStorage.setItem(\"user\", JSON.stringify(response.data.data));\n          localStorage.setItem(\"loginToken\", JSON.stringify(response.data.data.loginToken));\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }\n};\nexport default loginVo;","map":{"version":3,"names":["login","getToken","user","loginVo","state","userId","username","loginToken","localStorage","getItem","mutations","update","actions","Login","loginInfo","commit","Promise","resolve","reject","then","response","JSON","stringify","data","setItem","catch","error"],"sources":["D:/program/LanqiaoVue/vue-demo/src/store/modules/login.js"],"sourcesContent":["import { login } from '@/api/loginApi'//引入登录 api 接口\r\nimport { getToken } from '@/utils/auth'\r\nimport user from './user'\r\n\r\nconst loginVo={\r\n    state: {\r\n        user:{  // 存储用户的 userId 和 username\r\n            userId:'',\r\n            username:''\r\n        },  \r\n        // 存储token\r\n        loginToken: localStorage.getItem('loginToken') ? localStorage.getItem('loginToken') : ''\r\n    },\r\n    mutations:{\r\n        update\r\n    },\r\n\r\n    actions:{\r\n        // 登录\r\n        Login({ commit }, loginInfo) { //定义 Login 方法，在组件中使用 this.$store.dispatch(\"Login\") 调用\r\n            return new Promise((resolve, reject) => { //封装一个 Promise\r\n            login(loginInfo).then(response => { //使用 login 接口进行网络请求\r\n                state.user=JSON.stringify(response.data.data)\r\n                localStorage.setItem(\"user\",JSON.stringify(response.data.data))\r\n                localStorage.setItem(\"loginToken\",JSON.stringify(response.data.data.loginToken))\r\n                resolve(response) //将结果封装进 Promise\r\n            }).catch(error => {\r\n                reject(error)\r\n            })\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default loginVo"],"mappings":";;AAAA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,SAASC,QAAQ,QAAQ,cAAc;AACvC,OAAOC,IAAI,MAAM,QAAQ;AAEzB,IAAMC,OAAO,GAAC;EACVC,KAAK,EAAE;IACHF,IAAI,EAAC;MAAG;MACJG,MAAM,EAAC,EAAE;MACTC,QAAQ,EAAC;IACb,CAAC;IACD;IACAC,UAAU,EAAEC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,GAAGD,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,GAAG;EAC1F,CAAC;EACDC,SAAS,EAAC;IACNC,MAAM,EAANA;EACJ,CAAC;EAEDC,OAAO,EAAC;IACJ;IACAC,KAAK,uBAAaC,SAAS,EAAE;MAAA,IAArBC,MAAM,QAANA,MAAM;MAAiB;MAC3B,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QAAE;QAC1ClB,KAAK,CAACc,SAAS,CAAC,CAACK,IAAI,CAAC,UAAAC,QAAQ,EAAI;UAAE;UAChChB,KAAK,CAACF,IAAI,GAACmB,IAAI,CAACC,SAAS,CAACF,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC;UAC7Cf,YAAY,CAACgB,OAAO,CAAC,MAAM,EAACH,IAAI,CAACC,SAAS,CAACF,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC,CAAC;UAC/Df,YAAY,CAACgB,OAAO,CAAC,YAAY,EAACH,IAAI,CAACC,SAAS,CAACF,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAChB,UAAU,CAAC,CAAC;UAChFU,OAAO,CAACG,QAAQ,CAAC,EAAC;QACtB,CAAC,CAAC,CAACK,KAAK,CAAC,UAAAC,KAAK,EAAI;UACdR,MAAM,CAACQ,KAAK,CAAC;QACjB,CAAC,CAAC;MACF,CAAC,CAAC;IACN;EACJ;AACJ,CAAC;AAED,eAAevB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}