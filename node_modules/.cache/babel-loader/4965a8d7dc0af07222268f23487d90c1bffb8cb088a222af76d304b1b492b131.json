{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport { login } from '@/api/loginApi'; //引入登录 api 接口\nimport { getToken } from '@/utils/auth';\nvar loginVo = {\n  state: {\n    userId: JSON.parse(localStorage.getItem(\"userId\")),\n    loginToken: '' // 用户token，用户确认当前用户是否登录\n  },\n\n  getters: {\n    userId: function userId(state) {\n      var userId = state.userId;\n      if (!userId) {\n        userId = JSON.parse(localStorage.getItem(\"userId\"));\n      }\n      return userId;\n    },\n    loginToken: function loginToken(state) {\n      var loginToken = state.loginToken;\n      if (!loginToken) {\n        loginToken = JSON.parse(localStorage.getItem(\"loginToken\"));\n      }\n      return loginToken;\n    }\n  },\n  mutations: {\n    setUserId: function setUserId(state, userId) {\n      state.userId = userId;\n      localStorage.setItem(\"userId\", userId);\n    },\n    setLoginToken: function setLoginToken(state, loginToken) {\n      state.loginToken = loginToken;\n      localStorage.setItem(\"loginToken\", loginToken);\n    }\n  },\n  actions: {\n    // 登录\n    Login: function Login(_ref, loginInfo) {\n      var commit = _ref.commit;\n      //定义 Login 方法，在组件中使用 this.$store.dispatch(\"Login\") 调用\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        login(loginInfo).then(function (response) {\n          //使用 login 接口进行网络请求\n          var userId = JSON.stringify(response.data.data.userId);\n          var loginToken = JSON.stringify(response.data.data.loginToken);\n          commit('setUserId', userId);\n          commit('setLoginToken', loginToken);\n\n          // localStorage.setItem(\"loginToken\",JSON.stringify(response.data.data.loginToken))\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }\n};\nexport default loginVo;","map":{"version":3,"names":["login","getToken","loginVo","state","userId","JSON","parse","localStorage","getItem","loginToken","getters","mutations","setUserId","setItem","setLoginToken","actions","Login","loginInfo","commit","Promise","resolve","reject","then","response","stringify","data","catch","error"],"sources":["D:/program/LanqiaoVue/vue-demo/src/store/modules/login.js"],"sourcesContent":["import { login } from '@/api/loginApi'//引入登录 api 接口\r\nimport { getToken } from '@/utils/auth'\r\n\r\n\r\nconst loginVo={\r\n    state: {\r\n        userId: JSON.parse(localStorage.getItem(\"userId\")),\r\n        loginToken: '',  // 用户token，用户确认当前用户是否登录\r\n    },\r\n    getters: {\r\n        userId: state => {\r\n            let userId = state.userId;\r\n            if(!userId){\r\n                userId = JSON.parse(localStorage.getItem(\"userId\"))\r\n            }\r\n            return userId;\r\n        },\r\n        loginToken: state => {\r\n            let loginToken = state.loginToken;\r\n            if(!loginToken){\r\n                loginToken = JSON.parse(localStorage.getItem(\"loginToken\"))\r\n            }\r\n            return loginToken;\r\n        },\r\n    },\r\n    mutations: {\r\n        setUserId: (state,userId) => {\r\n            state.userId = userId;\r\n            localStorage.setItem(\"userId\",userId)\r\n        }, \r\n        setLoginToken: (state,loginToken) => {\r\n            state.loginToken = loginToken;\r\n            localStorage.setItem(\"loginToken\",loginToken)\r\n        }, \r\n    },\r\n    actions:{\r\n        // 登录\r\n        Login({ commit }, loginInfo) { //定义 Login 方法，在组件中使用 this.$store.dispatch(\"Login\") 调用\r\n            return new Promise((resolve, reject) => { //封装一个 Promise\r\n            login(loginInfo).then(response => { //使用 login 接口进行网络请求\r\n                let userId=JSON.stringify(response.data.data.userId)\r\n                let loginToken=JSON.stringify(response.data.data.loginToken)\r\n                commit('setUserId',userId)\r\n                commit('setLoginToken',loginToken)\r\n                \r\n                // localStorage.setItem(\"loginToken\",JSON.stringify(response.data.data.loginToken))\r\n                resolve(response) //将结果封装进 Promise\r\n            }).catch(error => {\r\n                reject(error)\r\n            })\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default loginVo"],"mappings":";;AAAA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,SAASC,QAAQ,QAAQ,cAAc;AAGvC,IAAMC,OAAO,GAAC;EACVC,KAAK,EAAE;IACHC,MAAM,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAClDC,UAAU,EAAE,EAAE,CAAG;EACrB,CAAC;;EACDC,OAAO,EAAE;IACLN,MAAM,EAAE,gBAAAD,KAAK,EAAI;MACb,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAM;MACzB,IAAG,CAACA,MAAM,EAAC;QACPA,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;MACvD;MACA,OAAOJ,MAAM;IACjB,CAAC;IACDK,UAAU,EAAE,oBAAAN,KAAK,EAAI;MACjB,IAAIM,UAAU,GAAGN,KAAK,CAACM,UAAU;MACjC,IAAG,CAACA,UAAU,EAAC;QACXA,UAAU,GAAGJ,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;MAC/D;MACA,OAAOC,UAAU;IACrB;EACJ,CAAC;EACDE,SAAS,EAAE;IACPC,SAAS,EAAE,mBAACT,KAAK,EAACC,MAAM,EAAK;MACzBD,KAAK,CAACC,MAAM,GAAGA,MAAM;MACrBG,YAAY,CAACM,OAAO,CAAC,QAAQ,EAACT,MAAM,CAAC;IACzC,CAAC;IACDU,aAAa,EAAE,uBAACX,KAAK,EAACM,UAAU,EAAK;MACjCN,KAAK,CAACM,UAAU,GAAGA,UAAU;MAC7BF,YAAY,CAACM,OAAO,CAAC,YAAY,EAACJ,UAAU,CAAC;IACjD;EACJ,CAAC;EACDM,OAAO,EAAC;IACJ;IACAC,KAAK,uBAAaC,SAAS,EAAE;MAAA,IAArBC,MAAM,QAANA,MAAM;MAAiB;MAC3B,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QAAE;QAC1CrB,KAAK,CAACiB,SAAS,CAAC,CAACK,IAAI,CAAC,UAAAC,QAAQ,EAAI;UAAE;UAChC,IAAInB,MAAM,GAACC,IAAI,CAACmB,SAAS,CAACD,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACrB,MAAM,CAAC;UACpD,IAAIK,UAAU,GAACJ,IAAI,CAACmB,SAAS,CAACD,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAChB,UAAU,CAAC;UAC5DS,MAAM,CAAC,WAAW,EAACd,MAAM,CAAC;UAC1Bc,MAAM,CAAC,eAAe,EAACT,UAAU,CAAC;;UAElC;UACAW,OAAO,CAACG,QAAQ,CAAC,EAAC;QACtB,CAAC,CAAC,CAACG,KAAK,CAAC,UAAAC,KAAK,EAAI;UACdN,MAAM,CAACM,KAAK,CAAC;QACjB,CAAC,CAAC;MACF,CAAC,CAAC;IACN;EACJ;AACJ,CAAC;AAED,eAAezB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}