{"ast":null,"code":"var _this = this;\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport axios from 'axios'; //引入 axios\nimport baseUrl from '../api/baseUrl'; //使用环境变量 + 模式的方式定义基础URL\n\n// 创建 axios 实例\nvar service = axios.create({\n  baseURL: baseUrl,\n  // api 的 base_url\n  timeout: 15000 // 请求超时时间\n});\n\n// 添加请求拦截器，在请求头中加 token\nservice.interceptors.request.use(function (config) {\n  if (localStorage.getItem('loginToken')) {\n    config.headers.token = JSON.parse(localStorage.getItem('loginToken'));\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\nservice.interceptors.response.use(function (data) {\n  //请求拦截器\n  console.log(data.statusCode);\n  var statusCode = data.statusCode;\n  if (statusCode == 401) {\n    _this.$router.push({\n      path: \"/login\"\n    });\n  }\n  return data; //响应了拦截器（在响应之后对数据进行一些处理）\n}, function (err) {\n  return Promise.reject(err); //Promise.reject方法会返回一个新的 Promise 实例，该实例的状态为rejected\n});\n\nexport default service;","map":{"version":3,"names":["axios","baseUrl","service","create","baseURL","timeout","interceptors","request","use","config","localStorage","getItem","headers","token","JSON","parse","error","Promise","reject","response","data","console","log","statusCode","$router","push","path","err"],"sources":["D:/program/LanqiaoVue/vue-demo/src/utils/request.js"],"sourcesContent":["import axios from 'axios' //引入 axios\r\nimport baseUrl from '../api/baseUrl' //使用环境变量 + 模式的方式定义基础URL\r\n\r\n// 创建 axios 实例\r\nconst service = axios.create({\r\n  baseURL: baseUrl, // api 的 base_url\r\n  timeout: 15000, // 请求超时时间\r\n})\r\n\r\n// 添加请求拦截器，在请求头中加 token\r\nservice.interceptors.request.use(function (config) {\r\n  if (localStorage.getItem('loginToken')) {\r\n    config.headers.token = JSON.parse(localStorage.getItem('loginToken'));\r\n  }\r\n  return config;\r\n}, function (error) {\r\n  return Promise.reject(error)\r\n})\r\n\r\nservice.interceptors.response.use(data => {//请求拦截器\r\n  console.log(data.statusCode)\r\n  let statusCode = data.statusCode\r\n  if(statusCode==401){\r\n    this.$router.push({\r\n        path: \"/login\",\r\n    })\r\n  }\r\n  return data //响应了拦截器（在响应之后对数据进行一些处理）\r\n}, err => {\r\n  return Promise.reject(err)//Promise.reject方法会返回一个新的 Promise 实例，该实例的状态为rejected\r\n})\r\n\r\nexport default service\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO,EAAC;AAC1B,OAAOC,OAAO,MAAM,gBAAgB,EAAC;;AAErC;AACA,IAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC3BC,OAAO,EAAEH,OAAO;EAAE;EAClBI,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;EACjD,IAAIC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,EAAE;IACtCF,MAAM,CAACG,OAAO,CAACC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACL,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;EACvE;EACA,OAAOF,MAAM;AACf,CAAC,EAAE,UAAUO,KAAK,EAAE;EAClB,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEFd,OAAO,CAACI,YAAY,CAACa,QAAQ,CAACX,GAAG,CAAC,UAAAY,IAAI,EAAI;EAAC;EACzCC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,UAAU,CAAC;EAC5B,IAAIA,UAAU,GAAGH,IAAI,CAACG,UAAU;EAChC,IAAGA,UAAU,IAAE,GAAG,EAAC;IACjB,KAAI,CAACC,OAAO,CAACC,IAAI,CAAC;MACdC,IAAI,EAAE;IACV,CAAC,CAAC;EACJ;EACA,OAAON,IAAI,EAAC;AACd,CAAC,EAAE,UAAAO,GAAG,EAAI;EACR,OAAOV,OAAO,CAACC,MAAM,CAACS,GAAG,CAAC;AAC5B,CAAC,CAAC;;AAEF,eAAezB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}