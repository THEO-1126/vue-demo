{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport { login, getUserByUserId } from '@/api/loginApi'; //引入登录 api 接口\nimport { getToken } from '@/utils/auth';\nvar loginVo = {\n  state: {\n    userId: JSON.parse(localStorage.getItem(\"userId\")) ? JSON.parse(localStorage.getItem(\"userId\")) : '',\n    // 用户token，用户确认当前用户是否登录\n    loginToken: JSON.parse(localStorage.getItem(\"loginToken\")) ? JSON.parse(localStorage.getItem(\"loginToken\")) : '',\n    // 用户token，用户确认当前用户是否登录\n    user: JSON.parse(localStorage.getItem(\"user\")) ? JSON.parse(localStorage.getItem(\"user\")) : ''\n  },\n  getters: {\n    userId: function userId(state) {\n      var userId = state.userId;\n      userId = JSON.parse(localStorage.getItem(\"userId\"));\n      return userId;\n    },\n    loginToken: function loginToken(state) {\n      var loginToken = state.loginToken;\n      loginToken = JSON.parse(localStorage.getItem(\"loginToken\"));\n      return loginToken;\n    },\n    user: function user(state) {\n      var user = state.user;\n      user = JSON.parse(localStorage.getItem(\"user\"));\n      return user;\n    }\n  },\n  mutations: {\n    setUserId: function setUserId(state, userId) {\n      state.userId = userId;\n      localStorage.setItem(\"userId\", userId);\n    },\n    setLoginToken: function setLoginToken(state, loginToken) {\n      state.loginToken = loginToken;\n      localStorage.setItem(\"loginToken\", loginToken);\n    },\n    setUser: function setUser(state, user) {\n      state.user = user, localStorage.setItem(\"user\", user);\n    }\n  },\n  actions: {\n    // 登录\n    Login: function Login(_ref, loginInfo) {\n      var commit = _ref.commit;\n      //定义 Login 方法，在组件中使用 this.$store.dispatch(\"Login\") 调用\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        login(loginInfo).then(function (response) {\n          //使用 login 接口进行网络请求\n          if (response.data.statusCode == 200) {\n            var userId = JSON.stringify(response.data.data.userId);\n            var loginToken = JSON.stringify(response.data.data.loginToken);\n            commit('setUserId', userId);\n            commit('setLoginToken', loginToken);\n          }\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    GetUserByUserId: function GetUserByUserId(_ref2, userId) {\n      var commit = _ref2.commit;\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        getUserByUserId(userId).then(function (response) {\n          //使用 permission 接口进行网络请求\n          var user = JSON.stringify(response.data.data);\n          commit('setUser', user);\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }\n};\nexport default loginVo;","map":{"version":3,"names":["login","getUserByUserId","getToken","loginVo","state","userId","JSON","parse","localStorage","getItem","loginToken","user","getters","mutations","setUserId","setItem","setLoginToken","setUser","actions","Login","loginInfo","commit","Promise","resolve","reject","then","response","data","statusCode","stringify","catch","error","GetUserByUserId"],"sources":["D:/program/LanqiaoVue/vue-demo/src/store/modules/login.js"],"sourcesContent":["import { login,getUserByUserId } from '@/api/loginApi'//引入登录 api 接口\r\nimport { getToken } from '@/utils/auth'\r\n\r\n\r\nconst loginVo={\r\n    state: {\r\n        userId: JSON.parse(localStorage.getItem(\"userId\")) ? JSON.parse(localStorage.getItem(\"userId\")):'',\r\n         // 用户token，用户确认当前用户是否登录\r\n        loginToken: JSON.parse(localStorage.getItem(\"loginToken\")) ? JSON.parse(localStorage.getItem(\"loginToken\")):'',  // 用户token，用户确认当前用户是否登录\r\n        user:JSON.parse(localStorage.getItem(\"user\")) ? JSON.parse(localStorage.getItem(\"user\")):'',\r\n    },\r\n    getters: {\r\n        userId: state => {\r\n            let userId = state.userId;\r\n            userId = JSON.parse(localStorage.getItem(\"userId\"))\r\n            return userId;\r\n        },\r\n        loginToken: state => {\r\n            let loginToken = state.loginToken;\r\n            loginToken = JSON.parse(localStorage.getItem(\"loginToken\"))\r\n            return loginToken;\r\n        },\r\n        user:state => {\r\n            let user = state.user\r\n            user =JSON.parse(localStorage.getItem(\"user\"))\r\n            return user;\r\n        },\r\n    },\r\n    mutations: {\r\n        setUserId: (state,userId) => {\r\n            state.userId = userId;\r\n            localStorage.setItem(\"userId\",userId)\r\n        }, \r\n        setLoginToken: (state,loginToken) => {\r\n            state.loginToken = loginToken;\r\n            localStorage.setItem(\"loginToken\",loginToken)\r\n        }, \r\n        setUser:(state,user)=>{\r\n            state.user=user,\r\n            localStorage.setItem(\"user\",user)\r\n        }\r\n    },\r\n    actions:{\r\n        // 登录\r\n        Login({ commit }, loginInfo) { //定义 Login 方法，在组件中使用 this.$store.dispatch(\"Login\") 调用\r\n            return new Promise((resolve, reject) => { //封装一个 Promise\r\n            login(loginInfo).then(response => { //使用 login 接口进行网络请求\r\n                if(response.data.statusCode==200){\r\n                    let userId=JSON.stringify(response.data.data.userId)\r\n                    let loginToken=JSON.stringify(response.data.data.loginToken)\r\n                    commit('setUserId',userId)\r\n                    commit('setLoginToken',loginToken)\r\n                }\r\n                resolve(response) //将结果封装进 Promise\r\n            }).catch(error => {\r\n                reject(error)\r\n            })\r\n            })\r\n        },\r\n        GetUserByUserId({commit},userId){\r\n            return new Promise((resolve, reject) => { //封装一个 Promise\r\n              getUserByUserId(userId).then(response => { //使用 permission 接口进行网络请求\r\n                let user=JSON.stringify(response.data.data)\r\n                commit('setUser',user)\r\n                resolve(response) //将结果封装进 Promise\r\n              }).catch(error => {\r\n                reject(error)\r\n              })\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default loginVo"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}